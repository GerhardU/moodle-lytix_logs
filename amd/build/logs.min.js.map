{"version":3,"file":"logs.min.js","sources":["../src/logs.js"],"sourcesContent":["import {wwwroot} from 'core/config';\n\n// TODO: Maybe add possibility to log multiple actions at once (would be useful in grademonitor).\n\n/**\n * @module log\n */\n\n/** @const {string} The URL to which the beacon containing logging data is sent. */\nconst URL = wwwroot + '/local/lytix/modules/logs/endpoint/store_activities.php';\n\n/**\n * This represents the interface to the logging backend.\n * It is advised to not use it directly and instead use makeLoggingFunction to create a custom logging function.\n *\n * @function\n * @name addActionLog\n * @param {string} userid  The user ID.\n * @param {string} courseid  The course ID.\n * @param {string} contextid  The context ID.\n * @param {string} widget  The name of the LYTIX widget logging.\n * @param {string} type  This should be an uppercase verb, describing what is being done with target.\n * @param {string} target  This should be an uppercase noun, representing the target of what is specified by type.\n * @param {string} meta  If further information needs to be included, this is the place.\n * @param {number} targetid  If the target has an ID by which it can be found in any database, include it here. Defaults to -1.\n */\nexport const addActionLog = (userid, courseid, contextid, widget, type, target, meta, targetid = -1) => {\n    navigator.sendBeacon(\n        URL,\n        JSON.stringify({\n            userid: userid,\n            courseid: courseid,\n            contextid: contextid,\n            widget: widget,\n            type: type,\n            target: target,\n            targetid: targetid,\n            meta: meta,\n            // Math.floor is necessary to cut off any possible decimals to prevent a float from being passed to BE.\n            timestamp: Math.floor(Date.now() / 1000),\n        })\n    );\n};\n\n/**\n * This creates a custom function that can be called with far less parameters than addActionLog.\n *\n * @function\n * @name makeLoggingFunction\n * @param {string} userid\n * @param {string} courseid\n * @param {string} contextid\n * @param {string} widget  The name of the LYTIX widget logging.\n * @return {function}  A function that does the same as addActionLog but with a fraction of the parameters.\n */\nexport const makeLoggingFunction = (userid, courseid, contextid, widget) => {\n    /**\n     * @function\n     * @param {string} type  This should be an uppercase verb, describing what is being done with target.\n     * @param {string} target  This should be an uppercase noun, representing the target of what is specified by type.\n     * @param {string} meta  If further information needs to be included, this is the place.\n     * @param {string} targetid  If the target has an ID by which it can be found in any database, include it here.\n     *\n     * @todo Just refer to addActionLog instead of listing the parameters again.\n     */\n    return (type, target, meta, targetid) => {\n        addActionLog(userid, courseid, contextid, widget, type, target, meta, targetid);\n    };\n};\n"],"names":["URL","wwwroot","addActionLog","userid","courseid","contextid","widget","type","target","meta","targetid","navigator","sendBeacon","JSON","stringify","timestamp","Math","floor","Date","now"],"mappings":"uMASMA,IAAMC,gBAAU,0DAiBTC,aAAe,SAACC,OAAQC,SAAUC,UAAWC,OAAQC,KAAMC,OAAQC,UAAMC,iEAAY,EAC9FC,UAAUC,WACNZ,IACAa,KAAKC,UAAU,CACXX,OAAQA,OACRC,SAAUA,SACVC,UAAWA,UACXC,OAAQA,OACRC,KAAMA,KACNC,OAAQA,OACRE,SAAUA,SACVD,KAAMA,KAENM,UAAWC,KAAKC,MAAMC,KAAKC,MAAQ,yEAgBZ,CAAChB,OAAQC,SAAUC,UAAWC,SAUtD,CAACC,KAAMC,OAAQC,KAAMC,YACxBR,aAAaC,OAAQC,SAAUC,UAAWC,OAAQC,KAAMC,OAAQC,KAAMC"}